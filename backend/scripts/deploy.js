// scripts/deploy.js
const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
  console.log("üöÄ D√©ploiement du contrat Voting...");

  // Obtenir le signataire (d√©ployeur)
  const [deployer] = await ethers.getSigners();
  console.log("üìù D√©ploiement avec le compte:", deployer.address);
  
  // V√©rifier le solde
  const balance = await deployer.provider.getBalance(deployer.address);
  console.log("üí∞ Solde du compte:", ethers.formatEther(balance), "ETH");

  // D√©ployer le contrat
  const Voting = await ethers.getContractFactory("Voting");
  const voting = await Voting.deploy();
  
  await voting.waitForDeployment();
  const contractAddress = await voting.getAddress();
  
  console.log("‚úÖ Contrat Voting d√©ploy√© √† l'adresse:", contractAddress);
  console.log("üîó Lien Etherscan:", `https://sepolia.etherscan.io/address/${contractAddress}`);

  // Sauvegarder les informations de d√©ploiement
  const deploymentInfo = {
    contractAddress: contractAddress,
    deployer: deployer.address,
    network: network.name,
    blockNumber: await ethers.provider.getBlockNumber(),
    timestamp: new Date().toISOString(),
    transactionHash: voting.deploymentTransaction().hash
  };

  // Cr√©er le dossier deployments s'il n'existe pas
  const deploymentsDir = path.join(__dirname, "../deployments");
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir);
  }

  // Sauvegarder dans un fichier JSON
  const deploymentFile = path.join(deploymentsDir, `${network.name}.json`);
  fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
  console.log("üíæ Informations de d√©ploiement sauvegard√©es dans:", deploymentFile);

  // G√©n√©rer l'ABI pour le frontend
  const contractArtifact = await ethers.getContractFactory("Voting");
  const abi = contractArtifact.interface.formatJson();
  
  const frontendDir = path.join(__dirname, "../../frontend/src/contracts");
  if (!fs.existsSync(frontendDir)) {
    fs.mkdirSync(frontendDir, { recursive: true });
  }
  
  const abiFile = path.join(frontendDir, "Voting.json");
  fs.writeFileSync(abiFile, JSON.stringify({
    contractAddress: contractAddress,
    abi: JSON.parse(abi)
  }, null, 2));
  console.log("üìã ABI sauvegard√©e pour le frontend:", abiFile);

  // Attendre quelques confirmations avant la v√©rification
  if (network.name !== "hardhat" && network.name !== "localhost") {
    console.log("‚è≥ Attente de confirmations avant v√©rification...");
    await voting.deploymentTransaction().wait(6);
    
    try {
      await hre.run("verify:verify", {
        address: contractAddress,
        constructorArguments: [],
      });
      console.log("‚úÖ Contrat v√©rifi√© sur Etherscan");
    } catch (error) {
      console.log("‚ùå Erreur lors de la v√©rification:", error.message);
    }
  }

  console.log("\nüéâ D√©ploiement termin√© avec succ√®s!");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erreur lors du d√©ploiement:", error);
    process.exit(1);
  });