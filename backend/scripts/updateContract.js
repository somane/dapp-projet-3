// Script pour v√©rifier et mettre √† jour la configuration du contrat

const fs = require('fs')
const path = require('path')

function updateContract() {
  console.log('üîç V√©rification de la configuration du contrat...')

  const contractFile = path.join(__dirname, '../src/contracts/Voting.json')
  const envFile = path.join(__dirname, '../.env.local')

  // V√©rifier que le fichier du contrat existe
  if (!fs.existsSync(contractFile)) {
    console.error('‚ùå Fichier de contrat non trouv√©.')
    console.log('üí° Suggestion: Ex√©cutez le d√©ploiement du contrat et le script updateFrontend.js')
    process.exit(1)
  }

  // Lire la configuration du contrat
  const contractConfig = JSON.parse(fs.readFileSync(contractFile, 'utf8'))
  console.log('‚úÖ Configuration du contrat trouv√©e')
  console.log(`üìç Adresse: ${contractConfig.contractAddress}`)
  console.log(`üåê R√©seau: ${contractConfig.network}`)

  // V√©rifier le fichier .env.local
  if (fs.existsSync(envFile)) {
    const envContent = fs.readFileSync(envFile, 'utf8')
    const contractAddressMatch = envContent.match(/NEXT_PUBLIC_CONTRACT_ADDRESS=(.*)/)
    
    if (contractAddressMatch) {
      const envAddress = contractAddressMatch[1].trim()
      if (envAddress === contractConfig.contractAddress) {
        console.log('‚úÖ Variables d\'environnement synchronis√©es')
      } else {
        console.log('‚ö†Ô∏è  Adresse dans .env.local diff√©rente de celle du contrat')
        console.log(`   .env.local: ${envAddress}`)
        console.log(`   Contrat:    ${contractConfig.contractAddress}`)
      }
    } else {
      console.log('‚ö†Ô∏è  NEXT_PUBLIC_CONTRACT_ADDRESS non trouv√©e dans .env.local')
    }
  } else {
    console.log('‚ö†Ô∏è  Fichier .env.local non trouv√©')
  }

  // V√©rifier que l'ABI existe et est valide
  if (contractConfig.abi && Array.isArray(contractConfig.abi)) {
    console.log(`‚úÖ ABI valide avec ${contractConfig.abi.length} fonctions/√©v√©nements`)
  } else {
    console.error('‚ùå ABI manquante ou invalide')
    process.exit(1)
  }

  console.log('üéâ Configuration v√©rifi√©e avec succ√®s!')
}

if (require.main === module) {
  updateContract()
}

module.exports = { updateContract }